package mimicry

import (
	"fmt"
	"github.com/theodorsm/covert-dtls/pkg/utils"
	"testing"
)

func TestUnmarshalKeyShare(t *testing.T) {
	keyShareBytes := []byte{0x0, 0x33, 0x0, 0x6b, 0x0, 0x69, 0x0, 0x1d, 0x0, 0x20, 0x52, 0x61, 0xca, 0x3a, 0xa4, 0xa3, 0x2f, 0xac, 0xf3, 0xf7, 0x1e, 0xdb, 0x5e, 0xbb, 0x7f, 0xdf, 0xa8, 0x8d, 0x4, 0x31, 0x9e, 0x56, 0xe3, 0x81, 0x86, 0x32, 0x3c, 0x24, 0xe8, 0x44, 0x5e, 0xe, 0x0, 0x17, 0x0, 0x41, 0x4, 0x7b, 0xdd, 0xd9, 0xaa, 0xb2, 0xd6, 0x56, 0xb8, 0x23, 0x1e, 0xb0, 0xe3, 0x2c, 0xc7, 0xf2, 0x6a, 0xcd, 0xe0, 0x55, 0xb3, 0x3f, 0x11, 0xa2, 0x22, 0x5e, 0x93, 0xb7, 0x92, 0xbd, 0x15, 0x98, 0xae, 0x5c, 0x8a, 0xcd, 0xd2, 0x57, 0x4e, 0x50, 0x3a, 0x3f, 0x4f, 0x25, 0x82, 0x2b, 0x63, 0x25, 0xe2, 0xe0, 0xb9, 0x17, 0x27, 0x3f, 0x97, 0x77, 0x27, 0x8, 0x77, 0xe5, 0xe3, 0xb8, 0xc7, 0x73, 0x98}
	keyshare := utils.KeyShare{}
	err := keyshare.Unmarshal(keyShareBytes)
	if err != nil {
		t.Errorf("Unmarshal failed: %v\n", err)
	}
	fmt.Printf("%+v\n", keyshare)
	if len(keyshare.KeyShareEntries) != 2 {
		t.Errorf("Unmarshal failed: length %v\n", len(keyshare.KeyShareEntries))
	}
	entry0 := keyshare.KeyShareEntries[0]
	expGroup := uint16(29)
	expKeyLength := uint16(32)
	if entry0.Group != expGroup || entry0.KeyLength != expKeyLength {
		t.Errorf("Unmarshal failed, entry #0: %v. Expected Group: %v, KeyLength: %v", entry0, expGroup, expKeyLength)
	}
	entry1 := keyshare.KeyShareEntries[1]
	expGroup = uint16(23)
	expKeyLength = uint16(65)
	if entry1.Group != expGroup || entry1.KeyLength != expKeyLength {
		t.Errorf("Unmarshal failed, entry #1: %v. Expected Group: %v, KeyLength: %v", entry1, expGroup, expKeyLength)
	}
}

func TestUnmarshalFakeExt(t *testing.T) {
	extBytes := []byte{0x0, 0xf6, 0x0, 0x17, 0x0, 0x0, 0xff, 0x1, 0x0, 0x1, 0x0, 0x0, 0xa, 0x0, 0xc, 0x0, 0xa, 0x0, 0x1d, 0x0, 0x17, 0x0, 0x18, 0x1, 0x0, 0x1, 0x1, 0x0, 0xb, 0x0, 0x2, 0x1, 0x0, 0x0, 0x10, 0x0, 0x12, 0x0, 0x10, 0x6, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x8, 0x63, 0x2d, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x0, 0x22, 0x0, 0xa, 0x0, 0x8, 0x4, 0x3, 0x5, 0x3, 0x6, 0x3, 0x2, 0x3, 0x0, 0x33, 0x0, 0x6b, 0x0, 0x69, 0x0, 0x1d, 0x0, 0x20, 0x52, 0x61, 0xca, 0x3a, 0xa4, 0xa3, 0x2f, 0xac, 0xf3, 0xf7, 0x1e, 0xdb, 0x5e, 0xbb, 0x7f, 0xdf, 0xa8, 0x8d, 0x4, 0x31, 0x9e, 0x56, 0xe3, 0x81, 0x86, 0x32, 0x3c, 0x24, 0xe8, 0x44, 0x5e, 0xe, 0x0, 0x17, 0x0, 0x41, 0x4, 0x7b, 0xdd, 0xd9, 0xaa, 0xb2, 0xd6, 0x56, 0xb8, 0x23, 0x1e, 0xb0, 0xe3, 0x2c, 0xc7, 0xf2, 0x6a, 0xcd, 0xe0, 0x55, 0xb3, 0x3f, 0x11, 0xa2, 0x22, 0x5e, 0x93, 0xb7, 0x92, 0xbd, 0x15, 0x98, 0xae, 0x5c, 0x8a, 0xcd, 0xd2, 0x57, 0x4e, 0x50, 0x3a, 0x3f, 0x4f, 0x25, 0x82, 0x2b, 0x63, 0x25, 0xe2, 0xe0, 0xb9, 0x17, 0x27, 0x3f, 0x97, 0x77, 0x27, 0x8, 0x77, 0xe5, 0xe3, 0xb8, 0xc7, 0x73, 0x98, 0x0, 0x2b, 0x0, 0x7, 0x6, 0xfe, 0xfc, 0xfe, 0xfd, 0x3, 0x3, 0x0, 0xd, 0x0, 0x20, 0x0, 0x1e, 0x4, 0x3, 0x5, 0x3, 0x6, 0x3, 0x2, 0x3, 0x8, 0x4, 0x8, 0x5, 0x8, 0x6, 0x4, 0x1, 0x5, 0x1, 0x6, 0x1, 0x2, 0x1, 0x4, 0x2, 0x5, 0x2, 0x6, 0x2, 0x2, 0x2, 0x0, 0x1c, 0x0, 0x2, 0x40, 0x1, 0x0, 0xe, 0x0, 0xb, 0x0, 0x8, 0x0, 0x7, 0x0, 0x8, 0x0, 0x1, 0x0, 0x2, 0x0}
	exts, err := MimicExtensionsUnmarshal(extBytes)
	if err != nil {
		t.Errorf("Unmarshal failed: %v\n", err)
	}
	fmt.Printf("Extensions: %+v\n", exts)
	out, err := utils.ExtensionMarshal(exts)
	if err != nil {
		t.Errorf("Marshal failed: %v\n", err)
	}
	fmt.Printf("length: %v, out: %#v\n", len(out), out)
}
